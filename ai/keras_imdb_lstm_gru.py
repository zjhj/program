# -*- coding: utf-8 -*-
"""keras_imdb_lstm_gru.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDpdyJP1fZQa42Bs6Z99nZgKFNqdI_dn

# 文本分类--电影的评论--好或坏(基于tensorflow2.x)
**IMDB**


互联网电影资料库（Internet Movie Database,简称IMDB）
是一个关于电影演员、电影、电视节目、电视明星和电影制作的在线数据库。

IMDB的资料中包括了影片的众多信息、演员、片长、内容介绍、分级、评论等。
对于电影的评分目前使用最多的就是IMDB评分。

# 1.导入相关依赖库
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
print(tf.__version__)
print(keras.__version__)

"""# 2.准备数据"""

#其中num_words = 30000的含义是，我们只采用单词索引序列前30000个高频单词，以免将数据搞得过于庞大。
num_words = 30000
#评论的长度为200，多余部分回被截取，不足的部分用'post'字符填充。
maxlen = 200

(x_train, y_train), (x_test, y_test) = keras.datasets.imdb.load_data(num_words=num_words)
print(x_train.shape, ' ', y_train.shape)
print(x_test.shape, ' ', y_test.shape)

x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen, padding='post')
x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen, padding='post')
print(x_train.shape, ' ', y_train.shape)
print(x_test.shape, ' ', y_test.shape)

"""# 3.建立模型"""

#模型验证集准确率54%
def rnn_model():
    model = keras.Sequential([
        keras.layers.Embedding(input_dim=num_words, output_dim=32, input_length=maxlen),
        keras.layers.SimpleRNN(32, return_sequences=True),
        keras.layers.SimpleRNN(1, activation='sigmoid', return_sequences=False)
    ])
    return model

#模型验证集准确率81%
def lstm_model():
    model = keras.Sequential([
        keras.layers.Embedding(input_dim=num_words, output_dim=32, input_length=maxlen),
        keras.layers.LSTM(32, return_sequences=True),
        keras.layers.LSTM(1, activation='sigmoid', return_sequences=False)
    ])
    return model

#模型验证集准确率85%
def gru_model():
    model = keras.Sequential([
        keras.layers.Embedding(input_dim=num_words, output_dim=32, input_length=maxlen),
        keras.layers.GRU(32, return_sequences=True),
        keras.layers.GRU(1, activation='sigmoid', return_sequences=False)
    ])
    return model

model = rnn_model()    
# model = lstm_model()
# model = gru_model()
model.summary()

"""# 4.训练模型"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model.compile(optimizer=keras.optimizers.Adam(),loss=keras.losses.BinaryCrossentropy(),metrics=['accuracy'])
# history = model.fit(x_train, y_train, batch_size=64, epochs=5,validation_split=0.1)

"""# 5.评估模型"""

score = model.evaluate(x_test, y_test, verbose=0)
print("Val loss:", score[0])
print("Val accuracy:", score[1])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['training', 'valivation'], loc='upper left')
plt.xlabel(u'Epoch')
plt.ylabel(u'accuracy')
plt.grid()
plt.show()

"""# 6.保存模型"""

json_string = model.to_json()#等价于 json_string = model.get_config()  
open('my_model_architecture.json','w').write(json_string)    
model.save('my_text_imdb_model.h5')